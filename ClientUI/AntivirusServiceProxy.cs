namespace ServiceReference1
{
    using System.Runtime.Serialization;
    using System;
    using System.ServiceModel;

    //------------------------------------------------------------------------------
    // <auto-generated>
    //     Этот код создан программой.
    //     Исполняемая версия:4.0.30319.42000
    //
    //     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
    //     повторной генерации кода.
    // </auto-generated>
    //------------------------------------------------------------------------------

    namespace AntiLib
    {
        using System.Runtime.Serialization;


        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name = "DateValue.Operation", Namespace = "http://schemas.datacontract.org/2004/07/AntiLib")]
        public enum DateValueOperation : int
        {

            [System.Runtime.Serialization.EnumMemberAttribute()]
            Quarantine = 0,

            [System.Runtime.Serialization.EnumMemberAttribute()]
            Delete = 1,
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IMCF")]
    public interface IMCF
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetStatus", ReplyAction = "http://tempuri.org/IMCF/GetStatusResponse")]
        bool GetStatus();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetStatus", ReplyAction = "http://tempuri.org/IMCF/GetStatusResponse")]
        System.Threading.Tasks.Task<bool> GetStatusAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetProgress", ReplyAction = "http://tempuri.org/IMCF/GetProgressResponse")]
        float GetProgress();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetProgress", ReplyAction = "http://tempuri.org/IMCF/GetProgressResponse")]
        System.Threading.Tasks.Task<float> GetProgressAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StartScaning", ReplyAction = "http://tempuri.org/IMCF/StartScaningResponse")]
        bool StartScaning(string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StartScaning", ReplyAction = "http://tempuri.org/IMCF/StartScaningResponse")]
        System.Threading.Tasks.Task<bool> StartScaningAsync(string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StopScaning", ReplyAction = "http://tempuri.org/IMCF/StopScaningResponse")]
        bool StopScaning();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StopScaning", ReplyAction = "http://tempuri.org/IMCF/StopScaningResponse")]
        System.Threading.Tasks.Task<bool> StopScaningAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StartTimer", ReplyAction = "http://tempuri.org/IMCF/StartTimerResponse")]
        void StartTimer();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/StartTimer", ReplyAction = "http://tempuri.org/IMCF/StartTimerResponse")]
        System.Threading.Tasks.Task StartTimerAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DestroyObserver", ReplyAction = "http://tempuri.org/IMCF/DestroyObserverResponse")]
        void DestroyObserver(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DestroyObserver", ReplyAction = "http://tempuri.org/IMCF/DestroyObserverResponse")]
        System.Threading.Tasks.Task DestroyObserverAsync(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/CreateObserver", ReplyAction = "http://tempuri.org/IMCF/CreateObserverResponse")]
        void CreateObserver(string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/CreateObserver", ReplyAction = "http://tempuri.org/IMCF/CreateObserverResponse")]
        System.Threading.Tasks.Task CreateObserverAsync(string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/MoveBackQuarantine", ReplyAction = "http://tempuri.org/IMCF/MoveBackQuarantineResponse")]
        void MoveBackQuarantine(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/MoveBackQuarantine", ReplyAction = "http://tempuri.org/IMCF/MoveBackQuarantineResponse")]
        System.Threading.Tasks.Task MoveBackQuarantineAsync(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteFile", ReplyAction = "http://tempuri.org/IMCF/DeleteFileResponse")]
        void DeleteFile(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteFile", ReplyAction = "http://tempuri.org/IMCF/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/ReloadObserver", ReplyAction = "http://tempuri.org/IMCF/ReloadObserverResponse")]
        void ReloadObserver();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/ReloadObserver", ReplyAction = "http://tempuri.org/IMCF/ReloadObserverResponse")]
        System.Threading.Tasks.Task ReloadObserverAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetQuarantine", ReplyAction = "http://tempuri.org/IMCF/GetQuarantineResponse")]
        string[] GetQuarantine();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetQuarantine", ReplyAction = "http://tempuri.org/IMCF/GetQuarantineResponse")]
        System.Threading.Tasks.Task<string[]> GetQuarantineAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteQuarantine", ReplyAction = "http://tempuri.org/IMCF/DeleteQuarantineResponse")]
        void DeleteQuarantine(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteQuarantine", ReplyAction = "http://tempuri.org/IMCF/DeleteQuarantineResponse")]
        System.Threading.Tasks.Task DeleteQuarantineAsync(string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetObserver", ReplyAction = "http://tempuri.org/IMCF/GetObserverResponse")]
        string[] GetObserver();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetObserver", ReplyAction = "http://tempuri.org/IMCF/GetObserverResponse")]
        System.Threading.Tasks.Task<string[]> GetObserverAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetTime", ReplyAction = "http://tempuri.org/IMCF/GetTimeResponse")]
        string[] GetTime();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetTime", ReplyAction = "http://tempuri.org/IMCF/GetTimeResponse")]
        System.Threading.Tasks.Task<string[]> GetTimeAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteTime", ReplyAction = "http://tempuri.org/IMCF/DeleteTimeResponse")]
        void DeleteTime(string time, string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/DeleteTime", ReplyAction = "http://tempuri.org/IMCF/DeleteTimeResponse")]
        System.Threading.Tasks.Task DeleteTimeAsync(string time, string path);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/AddTime", ReplyAction = "http://tempuri.org/IMCF/AddTimeResponse")]
        void AddTime(string time, string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/AddTime", ReplyAction = "http://tempuri.org/IMCF/AddTimeResponse")]
        System.Threading.Tasks.Task AddTimeAsync(string time, string path, AntiLib.DateValueOperation oper);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetReport", ReplyAction = "http://tempuri.org/IMCF/GetReportResponse")]
        string[] GetReport();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetReport", ReplyAction = "http://tempuri.org/IMCF/GetReportResponse")]
        System.Threading.Tasks.Task<string[]> GetReportAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetFile", ReplyAction = "http://tempuri.org/IMCF/GetFileResponse")]
        string[] GetFile(int idReport);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMCF/GetFile", ReplyAction = "http://tempuri.org/IMCF/GetFileResponse")]
        System.Threading.Tasks.Task<string[]> GetFileAsync(int idReport);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMCFChannel : IMCF, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MCFClient : System.ServiceModel.ClientBase<IMCF>, IMCF
    {

        public MCFClient()
        {
        }

        public MCFClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public MCFClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public MCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public MCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public bool GetStatus()
        {
            return base.Channel.GetStatus();
        }

        public System.Threading.Tasks.Task<bool> GetStatusAsync()
        {
            return base.Channel.GetStatusAsync();
        }

        public float GetProgress()
        {
            return base.Channel.GetProgress();
        }

        public System.Threading.Tasks.Task<float> GetProgressAsync()
        {
            return base.Channel.GetProgressAsync();
        }

        public bool StartScaning(string path, AntiLib.DateValueOperation oper)
        {
            return base.Channel.StartScaning(path, oper);
        }

        public System.Threading.Tasks.Task<bool> StartScaningAsync(string path, AntiLib.DateValueOperation oper)
        {
            return base.Channel.StartScaningAsync(path, oper);
        }

        public bool StopScaning()
        {
            return base.Channel.StopScaning();
        }

        public System.Threading.Tasks.Task<bool> StopScaningAsync()
        {
            return base.Channel.StopScaningAsync();
        }

        public void StartTimer()
        {
            base.Channel.StartTimer();
        }

        public System.Threading.Tasks.Task StartTimerAsync()
        {
            return base.Channel.StartTimerAsync();
        }

        public void DestroyObserver(string path)
        {
            base.Channel.DestroyObserver(path);
        }

        public System.Threading.Tasks.Task DestroyObserverAsync(string path)
        {
            return base.Channel.DestroyObserverAsync(path);
        }

        public void CreateObserver(string path, AntiLib.DateValueOperation oper)
        {
            base.Channel.CreateObserver(path, oper);
        }

        public System.Threading.Tasks.Task CreateObserverAsync(string path, AntiLib.DateValueOperation oper)
        {
            return base.Channel.CreateObserverAsync(path, oper);
        }

        public void MoveBackQuarantine(string path)
        {
            base.Channel.MoveBackQuarantine(path);
        }

        public System.Threading.Tasks.Task MoveBackQuarantineAsync(string path)
        {
            return base.Channel.MoveBackQuarantineAsync(path);
        }

        public void DeleteFile(string path)
        {
            base.Channel.DeleteFile(path);
        }

        public System.Threading.Tasks.Task DeleteFileAsync(string path)
        {
            return base.Channel.DeleteFileAsync(path);
        }

        public void ReloadObserver()
        {
            base.Channel.ReloadObserver();
        }

        public System.Threading.Tasks.Task ReloadObserverAsync()
        {
            return base.Channel.ReloadObserverAsync();
        }

        public string[] GetQuarantine()
        {
            return base.Channel.GetQuarantine();
        }

        public System.Threading.Tasks.Task<string[]> GetQuarantineAsync()
        {
            return base.Channel.GetQuarantineAsync();
        }

        public void DeleteQuarantine(string path)
        {
            base.Channel.DeleteQuarantine(path);
        }

        public System.Threading.Tasks.Task DeleteQuarantineAsync(string path)
        {
            return base.Channel.DeleteQuarantineAsync(path);
        }

        public string[] GetObserver()
        {
            return base.Channel.GetObserver();
        }

        public System.Threading.Tasks.Task<string[]> GetObserverAsync()
        {
            return base.Channel.GetObserverAsync();
        }

        public string[] GetTime()
        {
            return base.Channel.GetTime();
        }

        public System.Threading.Tasks.Task<string[]> GetTimeAsync()
        {
            return base.Channel.GetTimeAsync();
        }

        public void DeleteTime(string time, string path)
        {
            base.Channel.DeleteTime(time, path);
        }

        public System.Threading.Tasks.Task DeleteTimeAsync(string time, string path)
        {
            return base.Channel.DeleteTimeAsync(time, path);
        }

        public void AddTime(string time, string path, AntiLib.DateValueOperation oper)
        {
            base.Channel.AddTime(time, path, oper);
        }

        public System.Threading.Tasks.Task AddTimeAsync(string time, string path, AntiLib.DateValueOperation oper)
        {
            return base.Channel.AddTimeAsync(time, path, oper);
        }

        public string[] GetReport()
        {
            return base.Channel.GetReport();
        }

        public System.Threading.Tasks.Task<string[]> GetReportAsync()
        {
            return base.Channel.GetReportAsync();
        }

        public string[] GetFile(int idReport)
        {
            return base.Channel.GetFile(idReport);
        }

        public System.Threading.Tasks.Task<string[]> GetFileAsync(int idReport)
        {
            return base.Channel.GetFileAsync(idReport);
        }
    }



}
